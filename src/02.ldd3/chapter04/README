
:: Debugging by Printing

It is possible to read and modify the console loglevel using the text file
/proc/sys/kernel/printk. The file hosts four integer values:

	the current loglevel
	the default level for messages that lack an explicit loglevel
	the minimum allowed loglevel
	the boot-time default loglevel

$ cat /proc/sys/kernel/printk
1		4		1		4
current		default		minimum		boot-time-default


$ sudo sh -c 'echo 8 > /proc/sys/kernel/printk'
$ sudo insmod ./hello.ko
$ sudo rmmod hello

:: Debugging by Qemu

On Linux systems, vmlinux is a statically linked executable file that contains
the Linux kernel in one of the object file formats supported by Linux, which
includes ELF, COFF and a.out. The vmlinux file might be required for kernel
debugging, symbol table generation or other operations, but must be made
bootable before being used as an operating system kernel by adding a multiboot
header, bootsector and setup routines.

An image of this initial root file system must be stored somewhere accessible
by the Linux bootloader to the boot firmware of the computer. This can be the
root file system itself, a boot image on an optical disc, a small partition on
a local disk (a boot paratition, usually using ext4 or FAT file systems), or a
TFTP server (on systems that can boot from Ethernet).

1. Compile linux kernel

- https://www.kernel.org/doc/html/latest/admin-guide/README.html
- https://wiki.archlinux.org/index.php/Kernel/Traditional_compilation

Build the kernel with this series applied, enabling CONFIG_DEBUG_INFO (but leave
CONFIG_DEBUG_INFO_REDUCED off), enabling CONFIG_GDB_SCRIPTS.

2. Install GDB and Qemu

	sudo pacman -S gdb qemu

3. Create initramfs

	#!/bin/bash

	# Os     : Arch Linux
	# Kernel : 5.0.3

	INIT_DIR=$(pwd)
	BBOX_URL="https://busybox.net/downloads/busybox-1.30.1.tar.bz2"
	BBOX_FILENAME=$(basename ${BBOX_URL})
	BBOX_DIRNAME=$(basename ${BBOX_FILENAME} ".tar.bz2")
	RAM_FILENAME="${INIT_DIR}/initramfs.cpio.gz"

	function download_busybox {
		wget -c ${BBOX_URL} 2>/dev/null
	}

	function compile_busybox {
		tar xvf ${BBOX_FILENAME} && cd "${INIT_DIR}/${BBOX_DIRNAME}/"
		echo "[*] Settings > Build options > Build static binary (no shared libs)"
		echo "[!] Please enter to continue"
		read tmpvar
		make menuconfig && make -j2 && make install
	}

	function config_busybox {
		cd "${INIT_DIR}/${BBOX_DIRNAME}/"
		rm -rf initramfs/ && cp -rf _install/ initramfs/
		rm -f initramfs/linuxrc
		mkdir -p initramfs/{dev,proc,sys}
		sudo cp -a /dev/{null,console,tty,tty1,tty2,tty3,tty4} initramfs/dev/

	cat > "${INIT_DIR}/${BBOX_DIRNAME}/initramfs/init" << EOF
	#!/bin/busybox sh
	mount -t proc none /proc
	mount -t sysfs none /sys

	exec /sbin/init
	EOF

		chmod a+x initramfs/init
		cd "${INIT_DIR}/${BBOX_DIRNAME}/initramfs/"
		find . -print0 | cpio --null -ov --format=newc | gzip -9 > "${RAM_FILENAME}"
		echo "[*] output: ${RAM_FILENAME}"

	}

	download_busybox
	compile_busybox
	config_busybox

4. Boot Linux Kernel With Qemu

	#!/bin/bash

	KER_FILENAME="/home/debug/Projects/kernelbuild/linux-5.0.3/arch/x86/boot/bzImage"
	RAM_FILENAME="/home/debug/Projects/kerneldebug/initramfs.cpio.gz"

	qemu-system-x86_64 -s -kernel "${KER_FILENAME}" -initrd "${RAM_FILENAME}" -nographic -append "console=ttyS0"

	$ ./qemuboot_vmlinux.sh
	SeaBIOS (version 1.12.0-20181126_142135-anatol)


	iPXE (http://ipxe.org) 00:03.0 C980 PCI2.10 PnP PMM+07F92120+07EF2120 C980



	Booting from ROM...
	Probing EDD (edd=off to disable)... o
	[    0.019814] Spectre V2 : Spectre mitigation: LFENCE not serializing, switching to generic retpoline
	can't run '/etc/init.d/rcS': No such file or directory

	Please press Enter to activate this console.
	/ #  uname -a
	Linux archlinux 5.0.3 #2 SMP PREEMPT Mon Mar 25 10:27:13 CST 2019 x86_64 GNU/Linux
	/ #


5. Debug Linux Kernel With GDB

	$ gdb -q vmlinux
	Reading symbols from vmlinux...done.
	warning: File "/home/debug/Projects/kernelbuild/linux-5.0.3/scripts/gdb/vmlinux-gdb.py" auto-loading has been declined by your `auto-load safe-path' set to "$debugdir:$datadir/auto-load".
	To enable execution of this file add
		add-auto-load-safe-path /home/debug/Projects/kernelbuild/linux-5.0.3/scripts/gdb/vmlinux-gdb.py
	line to your configuration file "/home/debug/.gdbinit".
	To completely disable this security protection add
		set auto-load safe-path /
	line to your configuration file "/home/debug/.gdbinit".
	For more information about this security protection see the
	"Auto-loading safe path" section in the GDB manual.  E.g., run from the shell:
		info "(gdb)Auto-loading safe path"

	$ cat ~/.gdbinit
	add-auto-load-safe-path /home/debug/Projects/kernelbuild/linux-5.0.3/scripts/gdb/vmlinux-gdb.py

	$ gdb -q vmlinux
	Reading symbols from vmlinux...done.
	(gdb) target remote :1234
	Remote debugging using :1234
	0xffffffffaa64b852 in ?? ()

	(gdb) apropos lx-
	lx-cmdline --  Report the Linux Commandline used in the current kernel
	lx-cpus -- List CPU status arrays
	lx-dmesg -- Print Linux kernel log buffer
	lx-fdtdump -- Output Flattened Device Tree header and dump FDT blob to the filename
	lx-iomem -- Identify the IO memory resource locations defined by the kernel
	lx-ioports -- Identify the IO port resource locations defined by the kernel
	lx-list-check -- Verify a list consistency
	lx-lsmod -- List currently loaded modules
	lx-mounts -- Report the VFS mounts of the current process namespace
	lx-ps -- Dump Linux tasks
	lx-symbols -- (Re-)load symbols of Linux kernel and currently loaded modules
	lx-version --  Report the Linux Version of the current kernel

	(gdb) lx-symbols
	loading vmlinux
	Python Exception <class 'gdb.MemoryError'> Cannot access memory at address 0xffffffff8225f770:
	Error occurred in Python command: Cannot access memory at address 0xffffffff8225f770


:: References

https://elinux.org/Debugging_by_printing
https://www.kernel.org/doc/html/latest/dev-tools/gdb-kernel-debugging.html
https://media.ccc.de/v/froscon2017-1925-linux_kernel_debugging_for_sysadmins
https://medium.com/square-corner-blog/a-short-guide-to-kernel-debugging-e6fdbe7bfcdf
https://stackoverflow.com/questions/11408041/how-to-debug-the-linux-kernel-with-gdb-and-qemu
http://nickdesaulniers.github.io/blog/2018/10/24/booting-a-custom-linux-kernel-in-qemu-and-debugging-it-with-gdb/
https://wiki.archlinux.org/index.php/mkinitcpio
http://www.linuxfromscratch.org/lfs/view/stable/
https://www.youtube.com/watch?v=nv0CjGdOLxY
https://github.com/midfingr/youtube_notes/blob/master/qemu_arch
https://consen.github.io/2018/01/17/debug-linux-kernel-with-qemu-and-gdb/
https://www.thegeekstuff.com/2011/02/linux-boot-process/
https://en.wikipedia.org/wiki/Vmlinux
https://en.wikipedia.org/wiki/Initial_ramdisk
https://lwn.net/Articles/533552/

