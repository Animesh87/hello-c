scull0 to scull3
	Four devices, each consisting of a memory area that is both global and 
	persistent. Global means that if the device is opened multiple times, 
	the data contained within the device is shared by all the file descri-
	ptors that opened it. Persistent means that if the device is closed and
	reopened, data isn't lost. This device can be fun to work with, because
	it can be accessed and tested using conventional commands, such as cp,
	cat, and shell I/O redirection.

scullpipe0 and scullpipe3
	Four FIFO (first-in-first-out) devices, which act like pipes. One proce-
	ss reads what another process writes. If multiple processes read the sa-
	me device, they contend for data. The internals of scullpipe will show 
	how blocking and nonblocking read and write can be implemented without
	having to resort to interrupts. Although real drivers synchronize with
	their devices using hardware interrupts, the topic of blocking and nonb-
	locking operations is an important one and is separate from interrupt
	handling.

scullsingle
scullpriv
sculluid
scullwuid
	These devices are similar to scull0 but with some limitations on when
	an open is permitted. The first (scullsingle) allows only one process
	at a time to use the driver, whereas scullpriv is private to each virtu-
	al console (or X terminal session), because processes on each console/
	terminal get different memory areas. sculluid and scullwuid can be opene
	-d multiple times, but only by one user at a time; the former returns
	an error of "Device Busy" if another user is locking the device, whereas
	the latter implements blocking open. These variations of scull would ap-
	pear to be confusing policy and mechanism, but they are worth looking at
	, because some real-file devices require this sort of management.

----

Char devices are accessed through names in the filesystem. Those names are call-
ed special files or device files or simply nodes of the filesystem tree; they
are conventionally located in the /dev directory.

$ ls -ll /dev | grep -E "^c"
crw-------  1 root root      5,   1 Mar 25 10:38 console
crw-rw-rw-  1 root root      1,   3 Mar 26 13:53 null
crw-rw----  1 root uucp      4,  64 Mar 25 10:38 ttyS0
crw-rw----  1 root uucp      4,  65 Mar 25 10:38 ttyS1
crw-rw----  1 root uucp      4,  66 Mar 25 10:38 ttyS2
crw-rw----  1 root uucp      4,  67 Mar 25 10:38 ttyS3
crw-rw-rw-  1 root root      1,   5 Mar 25 10:38 zero

5 is the major number, and 1 is the minor number.

Traditionally, the major number identifies the driver associated with the devic-
e. For example, /dev/null and /dev/zero are both managed by driver 1, whereas
virtual consoles and serial terminals are managed by driver 4. Modern Linux
kernels allow multiple drivers to share major numbers, but most devices that
you will see still organized on the one-major-one-driver principle.

The minor number is used by the kernel to determine exactly which device is
being referred to.

----

How to access char device ?

|--------------------------| -----|
| MKDEV                    |      |
| register_chrdev_region   |      |----- register device
|--------------------------|      |
| alloc_chrdev_region      |      |
|--------------------------| -----|
| cdev_init                |      |----- init/add char device
| cdev_add                 |      |
|--------------------------| -----|
| cdev_del                 |      |----- del char device
|--------------------------| -----|
| unregister_chrdev_region |      |----- unregister device
|--------------------------| -----|

----

Quick Reference

This chapter introduced the following symbols and header files. The list of the
fields in struct file_operations and struct file is not repeated here.

#include <linux/types.h>
dev_t
	dev_t is the type used to represent device numbers within the kernel.

int MAJOR(dev_t dev)
int MINOR(dev_t dev)
	Macros that extract the major and minor numbers from a device number.

#include <linux/fs.h>
	The "filesystem" header is the header required for writing device drive-
	rs. Many important functions and data structures are declared in here.

int register_chrdev_region(dev_t first, unsigned int count, char *name)
int alloc_chrdev_region(dev_t *dev, unsigned int firstminor, unsigned int count, char *name)
void unregister_chrdev_region(dev_t first, unsigned int count)
	Functions that allow a driver to allocate and free ranges of device
	numbers. register_chrdev_region should be used desired major number is
	known in advance; for dynamic allocation, use alloc_chrdev_region inste-
	ad.

int register_chrdev(unsigned int major, const char *name, struct file_operations *fops);
	The old char device registration routine. It is emulated in the 2.6
	kernel but should not be used for new code. If the major number is not
	0, it is used unchanged; otherwise a dynamic allocation, use alloc_chrdev_region instead.

int unregister_chrdev(unsigned int major, const char *name);
	Function that undoes a registration made with register_chrdev. Both
	major and the name string must contain the same values that were used
	to register the driver.

struct file_operations;
struct file;
struct inode;
	These important data structures used by most devices. The file_operatio-
	ns structure holds a char driver's method; struct file represents an
	open file, and struct inode represents a file on disk.

#include <linux/cdev.h>
struct cdev *cdev_alloc(void);
void cdev_init(struct cdev *dev, struct file_operations *fops);
int cdev_add(struct cdev *dev, dev_t num, unsigned int count);
void cdev_del(struct cdev *dev);
	Functions for the management of cdev structures, which represent char
	devices within the kernel.

#include <linux/kernel.h>
container_of(pointer, type, field);
	A convenience macro that may be used to obtain a pointer to a structure
	from a pointer to some other structure contained within it.

#include <asm/uaccess.h>
	This include file declares functions used by kernel code to move data to
	and from user space.

unsigned long copy_from_user(void **to, const void *from, unsigned long count);
unsigneg long copy_to_user(void *to, const void *from, unsigned long count);
	Copy data between user space and kernel space.


- https://github.com/torvalds/linux/blob/master/Documentation/admin-guide/devices.txt

